cmake_minimum_required(VERSION 3.0)
project(fast_succinct_trie_build VERSION 0.1.0 LANGUAGES CXX)

if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
  # set(CMAKE_BUILD_TYPE Debug)
endif ()

set(GCC_WARNINGS "-Wall")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -pthread ${GCC_WARNINGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNDEBUG -march=native -DNDEBUG -O2 -g")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address -fno-omit-frame-pointer -O0 -g -DDEBUG -march=native")

message(STATUS "BUILD_TYPE is ${CMAKE_BUILD_TYPE}")
message(STATUS "CXX_FLAGS are ${CMAKE_CXX_FLAGS}")
message(STATUS "CXX_FLAGS_DEBUG are ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CXX_FLAGS_RELEASE are ${CMAKE_CXX_FLAGS_RELEASE}")

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../include)

add_executable(bench_fst bench.cpp)
set_target_properties(bench_fst PROPERTIES COMPILE_DEFINITIONS "USE_FST")

add_executable(bench_darts bench.cpp)
set_target_properties(bench_darts PROPERTIES COMPILE_DEFINITIONS "USE_DARTS")

add_executable(bench_dartsc bench.cpp)
set_target_properties(bench_dartsc PROPERTIES COMPILE_DEFINITIONS "USE_DARTSC")

add_executable(bench_cedar bench.cpp)
set_target_properties(bench_cedar PROPERTIES COMPILE_DEFINITIONS "USE_CEDAR")
add_executable(bench_cedarpp bench.cpp)
set_target_properties(bench_cedarpp PROPERTIES COMPILE_DEFINITIONS "USE_CEDARPP")

add_executable(bench_dastrie bench.cpp)
set_target_properties(bench_dastrie PROPERTIES COMPILE_DEFINITIONS "USE_DASTRIE")

set(XCDAT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/xcdat)
include_directories(${XCDAT_SOURCE_DIR}/include)
add_executable(bench_xcdat_7 bench.cpp)
set_target_properties(bench_xcdat_7 PROPERTIES COMPILE_DEFINITIONS "USE_XCDAT_7")
add_executable(bench_xcdat_8 bench.cpp)
set_target_properties(bench_xcdat_8 PROPERTIES COMPILE_DEFINITIONS "USE_XCDAT_8")
add_executable(bench_xcdat_15 bench.cpp)
set_target_properties(bench_xcdat_15 PROPERTIES COMPILE_DEFINITIONS "USE_XCDAT_15")
add_executable(bench_xcdat_16 bench.cpp)
set_target_properties(bench_xcdat_16 PROPERTIES COMPILE_DEFINITIONS "USE_XCDAT_16")

set(TX_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tx-trie)
include_directories(${TX_SOURCE_DIR})
add_executable(bench_tx bench.cpp ${TX_SOURCE_DIR}/tx.cpp ${TX_SOURCE_DIR}/ssv.cpp)
set_target_properties(bench_tx PROPERTIES COMPILE_DEFINITIONS "USE_TX")

set(MARISA_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/marisa-trie)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMARISA_USE_POPCNT -mpopcnt -DMARISA_USE_BMI2 -DMARISA_WORD_SIZE=64 -mbmi2 -msse4")
include_directories(${MARISA_SOURCE_DIR}/include)
include_directories(${MARISA_SOURCE_DIR}/lib)
file(GLOB_RECURSE MARISA_SOURCES "${MARISA_SOURCE_DIR}/lib/*/*.cc")
add_executable(bench_marisa bench.cpp ${MARISA_SOURCES})
set_target_properties(bench_marisa PROPERTIES COMPILE_DEFINITIONS "USE_MARISA")

set(MADRAS_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/madras-trie)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-function -mpopcnt -mbmi2")
include_directories(${MADRAS_SOURCE_DIR}/src)
add_executable(bench_madras bench.cpp ${MADRAS_SOURCES})
set_target_properties(bench_madras PROPERTIES COMPILE_DEFINITIONS "USE_MADRAS")

set(ART_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libart)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-function -mpopcnt -mbmi2")
include_directories(${ART_SOURCE_DIR}/cpp_src)
add_executable(bench_art bench.cpp ${ART_SOURCES})
set_target_properties(bench_art PROPERTIES COMPILE_DEFINITIONS "USE_ART")

set(PDT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/path_decomposed_tries)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-private-field -Wno-unused-local-typedef -Wno-reorder")
find_package(Boost 1.42.0 COMPONENTS unit_test_framework iostreams system thread filesystem REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})
link_directories (${Boost_LIBRARY_DIRS})
include_directories(${PDT_SOURCE_DIR})
add_subdirectory(${PDT_SOURCE_DIR}/succinct EXCLUDE_FROM_ALL)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if (SUCCINCT_USE_LIBCXX)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    endif ()
endif ()
if (UNIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2")
endif ()
add_subdirectory(${PDT_SOURCE_DIR}/tries)
add_subdirectory(${PDT_SOURCE_DIR}/repair)
add_executable(bench_pdt bench.cpp)
target_link_libraries(bench_pdt succinct ${Boost_LIBRARIES})
set_target_properties(bench_pdt PROPERTIES COMPILE_DEFINITIONS "USE_PDT")

set(HATTRIE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/hat-trie)
include_directories(${HATTRIE_SOURCE_DIR}/include)
add_executable(bench_hattrie bench.cpp)
set_target_properties(bench_hattrie PROPERTIES COMPILE_DEFINITIONS "USE_HATTRIE")

set(ARRAYHASH_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/array-hash)
include_directories(${ARRAYHASH_SOURCE_DIR}/include)
add_executable(bench_arrayhash bench.cpp)
set_target_properties(bench_arrayhash PROPERTIES COMPILE_DEFINITIONS "USE_ARRAYHASH")
